pipeline {
    agent any
    environment {
        GRADLE_OPTS = '-Dorg.gradle.daemon=false'
        BASEDIR = 'examples/spring-boot'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '1'))
    }
    stages {
        stage('checkout') {
            steps {
                sh 'git config --global http.sslVerify false'
                git branch: env.BRANCH_NAME, url: 'https://github.com/gitaroktato/being-agile-with-modern-java'

            }
        }
        stage('prepare') {
            steps {
               dir(BASEDIR) {
                    echo 'Configuring gradle'
                    sh "chmod u+x ./gradlew"
                    echo 'Configuring docker-compose'
                    script {
                        def exists = fileExists '$HOME/docker-compose'
                        if (exists) {
                            echo 'Skipping docker-compose installation'
                        } else {
                            sh "curl -L --fail https://github.com/docker/compose/releases/download/1.25.3/run.sh -o $HOME/docker-compose"
                            sh "chmod u+x $HOME/docker-compose"
                        }
                    }
                    echo 'Configuring Taurus'
                    sh "docker build -t bzt src/e2e/taurus"
               }
            }
        }
        stage('test') {
            agent {
                docker {
                    image 'openjdk:11-jdk-slim'
                    args '--network=host -v $HOME/.gradle:/root/.gradle'
                    reuseNode true
                }
            }
            steps {
               dir(BASEDIR) {
                    sh "chmod u+x ./gradlew"
                    sh "./gradlew clean test"
               }
            }
        }
        stage('verify') {
            agent {
                docker {
                    image 'openjdk:11-jdk-slim'
                    args '--network=host -v $HOME/.gradle:/root/.gradle'
                    reuseNode true
                }
            }
            steps {
               dir(BASEDIR) {
                    sh "./gradlew check"
               }
            }
        }
        stage('package') {
            agent {
                docker {
                    image 'openjdk:11-jdk-slim'
                    args '--network=host -v $HOME/.gradle:/root/.gradle'
                    reuseNode true
                }
            }
            steps {
               dir(BASEDIR) {
                    sh "./gradlew build"
               }
            }
        }
        stage('deploy to lab') {
            failFast true
            parallel {
                stage('us-west-2') {
                    input {
                        message "Deploy to us-west-2?"
                        ok "Deploy"
                    }
                    steps {
                        echo "Deploying to us-west-2"
                    }
                }
                stage('us-east-1') {
                    input {
                        message "Deploy to us-east-1?"
                        ok "Deploy"
                    }
                    steps {
                        dir(BASEDIR) {
                            sh "$HOME/docker-compose up -d --build"
                        }
                    }
                }
            }
        }
        stage('end-to-end test') {
            steps {
                dir(BASEDIR) {
                    echo "Running end-to-end tests"
                    sh 'docker run --name bzt --rm --network=host -v $(pwd):/build -w /build bzt /build/src/e2e/taurus/end-to-end.yml'
                }
            }
        }
        stage('deploy to prod') {
            failFast true
            parallel {
                stage('us-west-2') {
                    input {
                        message "Deploy to us-west-2?"
                        ok "Deploy"
                    }
                    steps {
                        echo "Deploying to us-west-2"
                    }
                }
                stage('us-east-1') {
                    input {
                        message "Deploy to us-east-1?"
                        ok "Deploy"
                    }
                    steps {
                        echo "Deploying to us-east-1"
                    }
                }
            }
        }
    }
    post {
        always {
            junit 'build/test-results/**/*.xml'
        }
        cleanup {
            dir(BASEDIR) {
                sh 'docker rm -f bzt'
                sh 'docker-compose down'
                sh 'git clean -df'
            }
        }
    }
}